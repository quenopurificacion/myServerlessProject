service: myserverlessproject
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverlessUser
  region: ap-southeast-2
  environment: 
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
  iamRoleStatements: 
    - Effect: Allow
      Action: 
        - dynamodb:*
        - s3:*
        - ses:*
      Resource: '*'
  apiKeys:
    - free:
      - myFreeApiKey
    - paid: 
      - myPaidApiKey
      - user2PaidKey
  usagePlan:
    - free:
        quota:
          limit: 1000
          period: MONTH
        throttle:
          rateLimit: 5
          burstLimit: 20
    - paid:
        quota:
          limit: 10000
          period: MONTH
        throttle:
          rateLimit: 50
          burstLimit: 200

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
  individually: true

custom:
  tableName: player-points
  bucketName: myserverlessprojectuploadbucket-090107
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: UploadData

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events: 
      - http:
          path: get-user/{id}
          method: GET
          cors: true
          private: true
  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events: 
      - http:
          path: get-player-score/{id}
          method: GET
          cors: true
  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events: 
      - http:
          path: create-player-score/{id}
          method: POST
          cors: true
  createFile:
    handler: lambdas/endpoints/createFile.handler
    events: 
      - http:
          path: create-file/{fileName}
          method: POST
          cors: true
  getFile:
    handler: lambdas/endpoints/getFile.handler
    events: 
      - http:
          path: get-file/{fileName}
          method: GET  
          cors: true

  sendEmail:
    handler: lambdas/endpoints/sendEmail.handler
    events: 
      - http:
          path: send-email
          method: POST
          cors: true

# Proxy API requests to your legacy endpoints with Serverless
  proxy:
    handler: lambdas/endpoints/proxy.handler
    events:
      - http:
          path: chuck-norris/{proxy+}
          method: ANY
          integration: http-proxy
          request: 
            uri: http://api.icndb.com/{proxy}
            parameters:
              paths: 
                proxy: true

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    myAssumeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: myAssumeRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement: 
            - Effect: Allow
              Principal: 
                Service: 
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com
              Action: 
                - sts:AssumeRole
                
        